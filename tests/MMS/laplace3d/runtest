#!/usr/bin/env python3

# Python script to run and analyse MMS test

from __future__ import division
from sys import argv

from boututils.run_wrapper import shell, shell_safe, launch_safe, getmpirun
from boutdata.collect import collect

from numpy import sqrt, max, abs, mean, array, log, concatenate
import matplotlib.pyplot as plt

import matplotlib
matplotlib.use("Agg")

MPIRUN = getmpirun()

print("Making MMS test")
shell_safe("make > make.log")

# List of NX values to use
#nxlist = [16, 32, 64, 128, 256, 512, 1024, 2048, 4096]
nxlist = [16, 32, 64, 128]
ny = 8

nout = 1
timestep = 0.1

if len(argv)>1:
    maxprocs = int(argv[1])
else:
    maxprocs = 8

plotChecks = True

error_2   = []  # The L2 error (RMS)
error_inf = []  # The maximum error

for nx in nxlist:
    args = "mesh:nx="+str(nx)+"+2*mxg"

    print("Running with " + args)

    # Delete old data
    shell("rm data/BOUT.dmp.*.nc")

    # Decide number of processors to use
    nproc = min(nx*ny//4, maxprocs)

    # Command to run
    cmd = "./laplace "+args
    # Launch using MPI
    s, out = launch_safe(cmd, runcmd=MPIRUN, nproc=nproc, pipe=True)

    # Save output to log file
    with open("run.log."+str(nx), "w") as f:
        f.write(out)

    # Collect data
    E = collect("error", tind=[nout,nout], path="data")
    E = E[:,:,:]

    l2 = sqrt(mean(E**2))
    linf = max(abs(E))

    error_2.append( l2 )
    error_inf.append( linf )

    print("Error norm: l-2 %f l-inf %f" % (l2, linf))

    if plotChecks:
        # some plots for debugging
        jy = E.shape[1]-1
        result = collect("result", path="data")[:,jy,:]
        solution = collect("solution", path="data")[:,jy,:]
        plt.figure()
        plt.subplot(131)
        plt.contourf(result,100)
        plt.colorbar()
        plt.title("result")
        plt.subplot(132)
        plt.contourf(solution,100)
        plt.colorbar()
        plt.title("solution")
        plt.subplot(133)
        plt.contourf(E[:,jy,:],100)
        plt.colorbar()
        plt.title("error")

        plt.tight_layout()
        plt.savefig("error"+str(nx)+".pdf")
        plt.clf()

# Calculate grid spacing
dx = 1. / (array(nxlist) - 2.)

order = log(error_2[-1] / error_2[-2]) / log(dx[-1] / dx[-2])
# plot errors
plt.figure()

plt.plot(dx, error_2, '-o', label=r'$l^2$')
plt.plot(dx, error_inf, '-x', label=r'$l^\infty$')

print("Convergence order = %f" % (order))

plt.plot(dx, error_2[-1]*(dx/dx[-1])**order, '--', label="Order %.1f"%(order))

plt.legend(loc="upper left")
plt.grid()

plt.yscale('log')
plt.xscale('log')

plt.xlabel(r'Mesh spacing $\delta x$')
plt.ylabel("Error norm")

plt.savefig("norm.pdf")

#plt.show()
plt.clf()

if order < 1.9:
    print("MMS test failed")
    exit(1)
else:
    exit(0)
