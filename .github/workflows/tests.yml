name: Tests
on: [push, pull_request]
jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    env:
      BOUT_TEST_TIMEOUT: "5m"
      PETSC_DIR: /usr/lib/petscdir/3.7.7/x86_64-linux-gnu-real
      PETSC_ARCH: ""
      SLEPC_DIR: /usr/lib/slepcdir/3.7.4/x86_64-linux-gnu-real
      SLEPC_ARCH: ""
      OMP_NUM_THREADS: ${{ matrix.omp_num_threads }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: "Optimised, shared, Python"
            os: ubuntu-18.04
            configure_options: "--enable-shared
                                --enable-checks=no
                                --enable-optimize=3
                                --disable-signal
                                --disable-track
                                --disable-backtrace
                                --with-petsc
                                --with-slepc
                                --with-hdf5
                                --with-sundials=/home/runner/local"
            script_flags: "-uim -t shared -t python"

          - name: "Debug, shared"
            os: ubuntu-18.04
            configure_options: "--enable-shared
                                --enable-sigfpe
                                --enable-debug
                                --with-hdf5
                                --with-petsc
                                --with-slepc
                                --with-sundials=/home/runner/local"
            script_flags: "-uim"

          - name: "Default options"
            os: ubuntu-18.04
            configure_options: "--with-petsc
                                --with-slepc
                                --with-hdf5
                                --with-sundials=/home/runner/local"
            script_flags: "-uim"

          - name: "OpenMP, shared"
            os: ubuntu-18.04
            configure_options: "--enable-shared
                                --enable-openmp
                                --with-petsc
                                --with-slepc
                                --with-hdf5
                                --with-sundials=/home/runner/local"
            script_flags: "-uim"
            omp_num_threads: 2

          - name: "CMake, shared"
            os: ubuntu-18.04
            cmake_options: "-DBUILD_SHARED_LIBS=ON
                            -DBOUT_ENABLE_OPENMP=ON
                            -DBOUT_USE_PETSC=ON
                            -DBOUT_USE_SLEPC=ON
                            -DBOUT_USE_HDF5=ON
                            -DBOUT_USE_SUNDIALS=ON
                            -DSUNDIALS_ROOT=/home/runner/local"
            omp_num_threads: 2

    steps:
      - name: Install dependencies
        run: sudo apt update &&
             sudo apt install -y
                 libfftw3-dev
                 libnetcdf-dev
                 libnetcdf-c++4-dev
                 netcdf-bin
                 hdf5-tools
                 python3
                 python3-h5py
                 python3-pip
                 python3-pytest
                 python3-numpy
                 python3-scipy
                 lcov
                 libhdf5-mpi-dev
                 openmpi-bin
                 libopenmpi-dev
                 libpetsc3.7.7-dev
                 libslepc3.7.4-dev
                 liblapack-dev
                 libparpack2-dev

      - uses: actions/checkout@v2
        with:
          submodules: true

      - name: Install pip packages
        run: ./.pip_install_for_travis.sh 'cython~=0.29' 'netcdf4~=1.5' 'sympy~=1.5' 'ninja'
        shell: bash

      - name: Cache SUNDIALS build
        uses: actions/cache@v2
        with:
          path: $HOME/local
          key: bout-sundials

      - name: Build SUNDIALS
        run: ./.build_sundials_for_travis.sh
        shell: bash

      - name: Build (configure)
        if: ${{ ! contains(matrix.name, 'CMake') }}
        run: ./.travis_script.sh ${{ matrix.script_flags }}
        shell: bash
        env:
          LD_LIBRARY_PATH: /home/runner/local/lib:$LD_LIBRARY_PATH
          CONFIGURE_OPTIONS: ${{ matrix.configure_options }}

      - name: Build (CMake)
        if: ${{ contains(matrix.name, 'CMake') }}
        run: |
          cmake --version
          cmake . -B build ${{ matrix.cmake_options }} -G Ninja
          cmake --build build --target build-check -j 2
          cd build
          ctest --output-on-failure --timeout 300
        shell: bash
