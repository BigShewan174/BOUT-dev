"""Functions for getting the config used for compiling BOUT++

"""

_yesno = {'"yes"': True, '"no"': False}

config = {
    "cc":'@MPICXX@',
    "cxx":'@MPICXX@',
    "ld":'@MPICXX@',
    "checks":"@CHECK_LEVEL@",
    "cflags":'@CONFIG_CFLAGS@',
    "libs":'@CONFIG_LDFLAGS@',

    "version":"@BOUT_VERSION@",
    "git":"@GIT_REVISION@",
    "idlpath":"@IDLCONFIGPATH@",
    "pythonpath":"@PYTHONCONFIGPATH@",

    "has_netcdf":"@HAS_NETCDF@",
    "has_pnetcdf":"@HAS_PNETCDF@",
    "has_hdf5":"@HAS_HDF5@",
    "has_pvode":"@HAS_PVODE@",
    "has_cvode":"@HAS_CVODE@",
    "has_ida":"@HAS_IDA@",
    "has_lapack":"@HAS_LAPACK@",
    "has_petsc":"@HAS_PETSC@",
    "has_slepc":"@HAS_SLEPC@",
    "has_mumps":"@HAS_MUMPS@",
    "has_arkode":"@HAS_ARKODE@",
    "has_openmp":"@HAS_OPENMP@",
    "has_nls":"@HAS_NLS@",
    "has_fftw":"@HAS_FFTW@",

    "petsc_has_sundials":"@PETSC_HAS_SUNDIALS@",

    "metric_type":"@METRIC_TYPE@",
    }

@property
def has():
    """Get a dict of the enabled features
    """
    _has={}
    for k in config:
        if k.startswith("has_"):
            _has[k[4:]]=_yesno[config[k]]
    return _has

def isMetric2D():
    """Is the metric 2D?

    """
    return _metric_type == "2D"

def isMetric3D():
    """Is the metric 3D?

    """
    return _metric_type == "3D"
