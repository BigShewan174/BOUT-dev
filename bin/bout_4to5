#!/bin/bash
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

VERBOSE=1
FORCE=0

usage() {
    echo "$0 options are: "
    #Just pull out special comments from this file
    grep "\#\#\#" $0
    exit 1
}

while getopts "fvqd" arg;
do
    case $arg in
	f) ### Force mode - run without asking
	    FORCE=1
	    ;;
        v) ### Enable verbose mode
            VERBOSE=1
            ;;
        q) ### Enable quite mode
            VERBOSE=0
            ;;
        d) ### Debug mode - print everything before doing it
            set -v
            ;;
        *) ### Show usage
            usage
	    ;;
    esac
done

# remove the processed options from the input arguments
shift $((OPTIND-1))

function maybe_proceed() {
    echo $1
    if test $FORCE -gt 0
    then
        verbose "Runing in force mode - continuing"
    else
           echo "Are you sure you want to continue? [y/N]"
           continue=y
           read continue
           continue=$(echo $continue |tr :lower: :upper:)
           if test ".$continue" == .y || test ".$continue" == .yes
           then
               echo "Continuing at your risk ..."
           else
               echo "Maybe soon :)"
               exit 0
           fi
    fi
}

GREP=$(which grep)
# Wrapper for grep to detect errors
function grep () {
    ex=0
    $GREP "$@" || ex=$?
    if test $ex -eq 2
    then
        echo "grep failed for $@" > /dev/stderr
        exit 2
    fi
}

# Set to false to be quiet
function verbose() {
    if test $VERBOSE -gt 0
    then
        echo $@
    fi
}

# If there is any error - we don't want to continue
set -e

version=

test -f $DIR/bout-config && version=$($DIR/bout-config --version )
if test -z $version
then
    maybe_proceed "The BOUT++ version could not be detected.
This script is intend to update to BOUT++ 5"
else
    major=$(echo $version|cut -d. -f1)
    if test $major -lt 5
    then
        maybe_proceed "The BOUT++ version appears to be $version.
This script is intend to update to BOUT++ 5"
    fi
fi

if ! git diff --exit-code &>/dev/null
then
    maybe_proceed "Git shows that you have uncommited changes."
else
    echo git is clean
fi

if test $# -eq 0
then
    for dir in src tools examples tests include
    do
        work="$work $DIR/../$dir"
    done
    WORK=default
else
    work=$@
    WORK=other
fi
echo $work

# Set to false if you don't want to run the script:
true &&
    printordo=   || printordo=echo


verbose "  Renaming LocalNx  -> local_nx"
verbose "  Renaming GlobalNx -> global_nx"
verbose "  Renaming OffsetNx -> offset_nx"
for dir in $work
do
    allmatches=$(grep -EHr 'LocalN|GlobalN|OffsetN' $dir )
    for d in x y z
    do
        for f in $(echo $allmatches|grep 'N$d'|cut -d: -f1|sort -u)
        do
            $printordo sed "s/LocalN$d/local_n$d/g"   $f -i
            $printordo sed "s/GlobalN$d/global_n$d/g" $f -i
            $printordo sed "s/OffsetN$d/offset_n$d/g" $f -i
        done
    done
done

# # clang-format everything - disabled due to issue https://github.com/boutproject/BOUT-dev/issues/1017
# if test $# -eq 0
# then
#     for dir in $work
#     do
#         files=$(find $dir|grep xx\$ )
#         if test "$files"
#         then
#             verbose "  Running clang-format on all files in $dir"
#             clang-format -i $files
#         fi
#     done
# fi


#Further changes:

#${d}end should be changed to ${d}end+1
