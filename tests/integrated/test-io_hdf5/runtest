#!/usr/bin/env python3

#
# Run the test, compare results against the benchmark
#

# Requires: all_tests
# Requires: hdf5
# Cores: 4

from boututils.run_wrapper import build_and_log, shell, launch_safe
from boutdata.collect import collect
import numpy as np
from sys import stdout, exit


build_and_log("I/O test")

# Read benchmark values

vars = ['ivar', 'rvar', 'bvar', 'f2d', 'f3d', 'fperp', 'fperp2', 'ivar_evol', 'rvar_evol',
        'bvar_evol', 'v2d_evol_x', 'v2d_evol_y', 'v2d_evol_z', 'fperp2_evol']

field_vars = ['f2d', 'f3d', 'fperp', 'fperp2', 'v2d_evol_x', 'v2d_evol_y', 'v2d_evol_z',
        'fperp2_evol'] # Field quantities, not scalars

tol = 1e-10

print("Reading benchmark data")
bmk = {}
for v in vars:
  bmk[v] = collect(v, path="data", prefix="benchmark.out", info=False)

def check_output():
    success = True
    for v in vars:
        stdout.write("      Checking variable "+v+" ... ")
        result = collect(v, path="data", info=False)

        # Compare benchmark and output
        if np.shape(bmk[v]) != np.shape(result):
            print("Fail, wrong shape")
            success = False
            continue

        diff =  np.max(np.abs(bmk[v] - result))
        if diff > tol:
            print("Fail, maximum difference = "+str(diff))
            success = False
            continue

        for attrname in bmk[v].attributes:
            bmkattr = bmk[v].attributes[attrname]
            resattr = result.attributes[attrname]
            if not bmkattr == resattr:
                print(
                    "attribute " + attrname + " not the same for " + v + ". Expected "
                    + str(bmkattr) + " got " + str(resattr) + "."
                )
                success = False

        if v in field_vars:
            # Check cell location
            if "cell_location" not in result.attributes:
                print("Fail: {0} has no cell_location attribute".format(v))
                success = False
                continue

            if result.attributes["cell_location"] != "CELL_CENTRE":
                print("Fail: Expecting cell_location == CELL_CENTRE, but got {0}".format(result.attributes["cell_location"]))
                success = False
                continue

        print("Pass")

    return success


print("Running I/O test")
success = True
for nproc in [1,2,4]:
    for split in [None, "NXPE", "NYPE"]:
        if split is not None:
            npe_max = nproc
        else:
            npe_max = 1
        for np_split in [i for i in [1,2,4] if i<=npe_max]:

            if split is not None:
                extra_args = " "+split+"="+str(np_split)
            else:
                extra_args = ""

            cmd = "./test_io_hdf5" + extra_args

            # On some machines need to delete dmp files first
            # or data isn't written correctly
            shell("rm data/BOUT.dmp.*.nc")

            # Run test case
            print("   %d processor...." % (nproc) + extra_args)
            s, out = launch_safe(cmd, nproc=nproc, pipe=True)
            with open("run.log."+str(nproc), "w") as f:
                f.write(out)

            # Check processor splitting
            if split is not None:
                stdout.write("      Checking "+split+" ... ")
                v = collect(split, path="data", info=False)
                if v != np_split:
                    print("Fail, wrong "+split+" expecting %i, got %i" % (np_split, v))
                    success = False
                else:
                    print("Pass")

            # Check output
            if not check_output():
                success = False

# Test double-adding variables
s, out = launch_safe("./test_io_hdf5 check_double_add=true", nproc=nproc, pipe=True)
print("Checking with variables added twice")
if not check_output():
    success = False

# Test incorrectly double-adding variables - should throw exception
for check_incorrect_add in [
    "ivar",
    "rvar",
    "bvar",
    "f2d",
    "f3d",
    "fperp",
    "ivar_evol",
    "rvar_evol",
    "bvar_evol",
    "v2d_evol",
    "v3d_evol"
]:
    try:
        s, out = launch_safe(
            "./test_io_hdf5 check_incorrect_add="+check_incorrect_add,
            nproc=nproc,
            pipe=True
        )
    except RuntimeError as e:
        if not (
            "Variable with name '" + check_incorrect_add + "' already added to Datafile"
        ):
            print(
                "incorrect error message for check_incorrect_add=" + check_incorrect_add
            )
            success = False
    else:
        # was supposed to fail and raise an exception
        print(
            "did not raise an exception for incorrect double-add of "
            + check_incorrect_add
        )
        success = False

if success:
  print(" => All I/O tests passed")
  exit(0)
else:
  print(" => Some failed tests")
  exit(1)
